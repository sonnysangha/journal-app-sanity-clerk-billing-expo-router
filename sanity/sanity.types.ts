/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type DailyPrompt = {
  _id: string
  _type: 'dailyPrompt'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  prompt?: string
  emoji?: string
  category?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  suggestedMood?: 'very-sad' | 'sad' | 'neutral' | 'happy' | 'very-happy'
  isActive?: boolean
  weight?: number
  tags?: Array<string>
  createdAt?: string
}

export type JournalEntry = {
  _id: string
  _type: 'journalEntry'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
  >
  mood?: 'very-sad' | 'sad' | 'neutral' | 'happy' | 'very-happy'
  userId?: string
  aiGeneratedCategory?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  createdAt?: string
}

export type Category = {
  _id: string
  _type: 'category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  color?: string
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | DailyPrompt
  | JournalEntry
  | Category
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../lib/sanity/categories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[  _type == "category"] | order(title asc) {  _id,  title,  color}
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string
  title: string | null
  color: string | null
}>
// Variable: CATEGORY_BY_ID_QUERY
// Query: *[  _type == "category"   && _id == $categoryId][0]{  _id,  title,  color}
export type CATEGORY_BY_ID_QUERYResult = {
  _id: string
  title: string | null
  color: string | null
} | null

// Source: ../lib/sanity/dailyPrompts.ts
// Variable: ACTIVE_DAILY_PROMPTS_QUERY
// Query: *[  _type == "dailyPrompt"   && isActive == true] | order(weight desc) {  _id,  title,  prompt,  emoji,  category->{    title,    color  },  suggestedMood,  isActive,  weight,  tags,  createdAt}
export type ACTIVE_DAILY_PROMPTS_QUERYResult = Array<{
  _id: string
  title: string | null
  prompt: string | null
  emoji: string | null
  category: {
    title: string | null
    color: string | null
  } | null
  suggestedMood: 'happy' | 'neutral' | 'sad' | 'very-happy' | 'very-sad' | null
  isActive: boolean | null
  weight: number | null
  tags: Array<string> | null
  createdAt: string | null
}>
// Variable: DAILY_PROMPT_BY_ID_QUERY
// Query: *[  _type == "dailyPrompt"   && _id == $promptId][0]{  _id,  title,  prompt,  emoji,  category->{    title,    color  },  suggestedMood,  isActive,  weight,  tags,  createdAt}
export type DAILY_PROMPT_BY_ID_QUERYResult = {
  _id: string
  title: string | null
  prompt: string | null
  emoji: string | null
  category: {
    title: string | null
    color: string | null
  } | null
  suggestedMood: 'happy' | 'neutral' | 'sad' | 'very-happy' | 'very-sad' | null
  isActive: boolean | null
  weight: number | null
  tags: Array<string> | null
  createdAt: string | null
} | null
// Variable: DAILY_PROMPTS_BY_TAG_QUERY
// Query: *[  _type == "dailyPrompt"   && isActive == true  && $tag in tags] | order(weight desc) {  _id,  title,  prompt,  emoji,  category->{    title,    color  },  suggestedMood,  isActive,  weight,  tags,  createdAt}
export type DAILY_PROMPTS_BY_TAG_QUERYResult = Array<{
  _id: string
  title: string | null
  prompt: string | null
  emoji: string | null
  category: {
    title: string | null
    color: string | null
  } | null
  suggestedMood: 'happy' | 'neutral' | 'sad' | 'very-happy' | 'very-sad' | null
  isActive: boolean | null
  weight: number | null
  tags: Array<string> | null
  createdAt: string | null
}>

// Source: ../lib/sanity/journal.ts
// Variable: USER_JOURNAL_ENTRIES_QUERY
// Query: *[  _type == "journalEntry"   && userId == $userId] | order(createdAt desc) {  _id,  title,  content,  mood,  createdAt,  aiGeneratedCategory->{    title,    color  }}
export type USER_JOURNAL_ENTRIES_QUERYResult = Array<{
  _id: string
  title: string | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
  mood: 'happy' | 'neutral' | 'sad' | 'very-happy' | 'very-sad' | null
  createdAt: string | null
  aiGeneratedCategory: {
    title: string | null
    color: string | null
  } | null
}>
// Variable: JOURNAL_ENTRY_BY_ID_QUERY
// Query: *[  _type == "journalEntry"   && _id == $entryId][0]{  _id,  title,  content,  mood,  createdAt,  userId,  aiGeneratedCategory->{    title,    color  }}
export type JOURNAL_ENTRY_BY_ID_QUERYResult = {
  _id: string
  title: string | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
  mood: 'happy' | 'neutral' | 'sad' | 'very-happy' | 'very-sad' | null
  createdAt: string | null
  userId: string | null
  aiGeneratedCategory: {
    title: string | null
    color: string | null
  } | null
} | null
// Variable: USER_JOURNAL_ENTRIES_WITH_DATE_RANGE_QUERY
// Query: *[  _type == "journalEntry"   && userId == $userId  && createdAt >= $startDate  && createdAt <= $endDate] | order(createdAt desc) {  _id,  title,  content,  mood,  createdAt,  aiGeneratedCategory->{    title,    color  }}
export type USER_JOURNAL_ENTRIES_WITH_DATE_RANGE_QUERYResult = Array<{
  _id: string
  title: string | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
  mood: 'happy' | 'neutral' | 'sad' | 'very-happy' | 'very-sad' | null
  createdAt: string | null
  aiGeneratedCategory: {
    title: string | null
    color: string | null
  } | null
}>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[\n  _type == "category"\n] | order(title asc) {\n  _id,\n  title,\n  color\n}': ALL_CATEGORIES_QUERYResult
    '*[\n  _type == "category" \n  && _id == $categoryId\n][0]{\n  _id,\n  title,\n  color\n}': CATEGORY_BY_ID_QUERYResult
    '*[\n  _type == "dailyPrompt" \n  && isActive == true\n] | order(weight desc) {\n  _id,\n  title,\n  prompt,\n  emoji,\n  category->{\n    title,\n    color\n  },\n  suggestedMood,\n  isActive,\n  weight,\n  tags,\n  createdAt\n}': ACTIVE_DAILY_PROMPTS_QUERYResult
    '*[\n  _type == "dailyPrompt" \n  && _id == $promptId\n][0]{\n  _id,\n  title,\n  prompt,\n  emoji,\n  category->{\n    title,\n    color\n  },\n  suggestedMood,\n  isActive,\n  weight,\n  tags,\n  createdAt\n}': DAILY_PROMPT_BY_ID_QUERYResult
    '*[\n  _type == "dailyPrompt" \n  && isActive == true\n  && $tag in tags\n] | order(weight desc) {\n  _id,\n  title,\n  prompt,\n  emoji,\n  category->{\n    title,\n    color\n  },\n  suggestedMood,\n  isActive,\n  weight,\n  tags,\n  createdAt\n}': DAILY_PROMPTS_BY_TAG_QUERYResult
    '*[\n  _type == "journalEntry" \n  && userId == $userId\n] | order(createdAt desc) {\n  _id,\n  title,\n  content,\n  mood,\n  createdAt,\n  aiGeneratedCategory->{\n    title,\n    color\n  }\n}': USER_JOURNAL_ENTRIES_QUERYResult
    '*[\n  _type == "journalEntry" \n  && _id == $entryId\n][0]{\n  _id,\n  title,\n  content,\n  mood,\n  createdAt,\n  userId,\n  aiGeneratedCategory->{\n    title,\n    color\n  }\n}': JOURNAL_ENTRY_BY_ID_QUERYResult
    '*[\n  _type == "journalEntry" \n  && userId == $userId\n  && createdAt >= $startDate\n  && createdAt <= $endDate\n] | order(createdAt desc) {\n  _id,\n  title,\n  content,\n  mood,\n  createdAt,\n  aiGeneratedCategory->{\n    title,\n    color\n  }\n}': USER_JOURNAL_ENTRIES_WITH_DATE_RANGE_QUERYResult
  }
}
